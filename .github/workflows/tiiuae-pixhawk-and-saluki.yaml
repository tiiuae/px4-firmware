name: tiiuae-pixhawk-and-saluki

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  px4_fmu-v5x_ssrc:
    name: build px4_fmu-v5x_ssrc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout px4-firmware
        uses: actions/checkout@v2
        with:
          path: px4-firmware
          fetch-depth: 0
      - name: Run px4-firmware px4_fmu-v5x_ssrc build
        run: |
          set -eux
          mkdir -p bin
          cd px4-firmware/
          ./clone_public.sh
          ./build.sh ../bin/ px4_fmu-v5x_ssrc
          ls ../bin
      - name: Upload px4_fmu-v5x_ssrc
        uses: actions/upload-artifact@v2
        with:
          name: pixhawk
          path: bin/
          retention-days: 1

  # NOTE: private repo is needed for this build, which is not available for forked PRs
  ssrc_saluki-v1_default:
    name: build ssrc_saluki-v1_default
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'push'
    steps:
      - name: Checkout px4-firmware
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_REPO_TOKEN }}
          submodules: recursive
          path: px4-firmware
          fetch-depth: 0
      - name: Run px4-firmware ssrc_saluki-v1_default build
        run: |
          set -eux
          mkdir -p bin
          cd px4-firmware/
          ./build.sh ../bin/ ssrc_saluki-v1_default
          ls ../bin
      - name: Upload ssrc_saluki-v1_default
        uses: actions/upload-artifact@v2
        with:
          name: pixhawk
          path: bin/
          retention-days: 1

  ssrc_saluki-v1_bootloader:
    name: build ssrc_saluki-v1_bootloader
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'push'
    steps:
      - name: Checkout px4-firmware
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_REPO_TOKEN }}
          submodules: recursive
          path: px4-firmware
          fetch-depth: 0
      - name: Run px4-firmware ssrc_saluki-v1_bootloader build
        run: |
          set -eux
          mkdir -p bin
          cd px4-firmware/
          ./build.sh ../bin/ ssrc_saluki-v1_bootloader
          ls ../bin
      - name: Upload ssrc_saluki-v1_bootloader
        uses: actions/upload-artifact@v2
        with:
          name: pixhawk
          path: bin/
          retention-days: 1

  ssrc_saluki-v1_amp:
    name: build ssrc_saluki-v1_amp
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'push'
    steps:
      - name: Checkout px4-firmware
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_REPO_TOKEN }}
          submodules: recursive
          path: px4-firmware
          fetch-depth: 0
      - name: Run px4-firmware ssrc_saluki-v1_amp build
        run: |
          set -eux
          mkdir -p bin
          cd px4-firmware/
          ./build.sh ../bin/ ssrc_saluki-v1_amp
          ls ../bin
      - name: Upload ssrc_saluki-v1_amp
        uses: actions/upload-artifact@v2
        with:
          name: pixhawk
          path: bin/
          retention-days: 1

  ssrc_saluki-v1_protected:
    name: build ssrc_saluki-v1_protected
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'push'
    steps:
      - name: Checkout px4-firmware
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_REPO_TOKEN }}
          submodules: recursive
          path: px4-firmware
          fetch-depth: 0
      - name: Run px4-firmware ssrc_saluki-v1_protected build
        run: |
          set -eux
          mkdir -p bin
          cd px4-firmware/
          ./build.sh ../bin/ ssrc_saluki-v1_protected
          ls ../bin
      - name: Upload ssrc_saluki-v1_protected
        uses: actions/upload-artifact@v2
        with:
          name: pixhawk
          path: bin/
          retention-days: 1

  ssrc_saluki-v2_default:
    name: build ssrc_saluki-v2_default
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'push'
    steps:
      - name: Checkout px4-firmware
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_REPO_TOKEN }}
          submodules: recursive
          path: px4-firmware
          fetch-depth: 0
      - name: Run px4-firmware ssrc_saluki-v2_default build
        run: |
          set -eux
          mkdir -p bin
          cd px4-firmware/
          ./build.sh ../bin/ ssrc_saluki-v2_default
          ls ../bin
      - name: Upload ssrc_saluki-v2_default
        uses: actions/upload-artifact@v2
        with:
          name: pixhawk
          path: bin/
          retention-days: 1

  ssrc_saluki-v2_bootloader:
    name: build ssrc_saluki-v2_bootloader
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'push'
    steps:
      - name: Checkout px4-firmware
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_REPO_TOKEN }}
          submodules: recursive
          path: px4-firmware
          fetch-depth: 0
      - name: Run px4-firmware ssrc_saluki-v2_bootloader build
        run: |
          set -eux
          mkdir -p bin
          cd px4-firmware/
          ./build.sh ../bin/ ssrc_saluki-v2_bootloader
          ls ../bin
      - name: Upload ssrc_saluki-v2_bootloader
        uses: actions/upload-artifact@v2
        with:
          name: pixhawk
          path: bin/
          retention-days: 1

  ssrc_saluki-v2_amp:
    name: build ssrc_saluki-v2_amp
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'push'
    steps:
      - name: Checkout px4-firmware
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_REPO_TOKEN }}
          submodules: recursive
          path: px4-firmware
          fetch-depth: 0
      - name: Run px4-firmware ssrc_saluki-v2_amp build
        run: |
          set -eux
          mkdir -p bin
          cd px4-firmware/
          ./build.sh ../bin/ ssrc_saluki-v2_amp
          ls ../bin
      - name: Upload ssrc_saluki-v2_amp
        uses: actions/upload-artifact@v2
        with:
          name: pixhawk
          path: bin/
          retention-days: 1

  px4fwupdater:
    name: build px4fwupdater
    runs-on: ubuntu-latest
    needs:
      - px4_fmu-v5x_ssrc
      - ssrc_saluki-v1_default
      - ssrc_saluki-v1_bootloader
      - ssrc_saluki-v1_amp
      - ssrc_saluki-v1_protected
      - ssrc_saluki-v2_default
      - ssrc_saluki-v2_bootloader
      - ssrc_saluki-v2_amp
    steps:
      - name: Checkout px4-firmware
        uses: actions/checkout@v2
        with:
          path: px4-firmware
          fetch-depth: 0
      - name: Download pixhawk artifacts
        uses: actions/download-artifact@v2
        with:
          name: pixhawk
          path: bin
      - name: Run px4-firmware px4fwupdater build
        run: |
          set -eux
          mkdir -p bin
          cd px4-firmware/
          ./clone_public.sh
          ./build.sh ../bin/ px4fwupdater
          ls ../bin
      - name: Upload px4fwupdater
        uses: actions/upload-artifact@v2
        with:
          name: pixhawk
          path: bin/
          retention-days: 1
      - name: Firmware flasher - Container metadata
        id: containermeta # referenced from later step
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/tiiuae/px4-firmware
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Firmware flasher - Build and push
        uses: docker/build-push-action@v2
        with:
          push: false
          context: .
          file: px4-firmware/Tools/px_uploader.Dockerfile
          tags: ${{ steps.containermeta.outputs.tags }}
          labels: ${{ steps.containermeta.outputs.labels }}

  artifactory:
    name: upload builds to Artifactory
    runs-on: ubuntu-latest
    needs:
      - px4_fmu-v5x_ssrc
      - ssrc_saluki-v1_default
      - ssrc_saluki-v1_bootloader
      - ssrc_saluki-v1_amp
      - ssrc_saluki-v1_protected
      - ssrc_saluki-v2_default
      - ssrc_saluki-v2_bootloader
      - ssrc_saluki-v2_amp
      - px4fwupdater
    if: true
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: pixhawk
          path: bin
      - uses: jfrog/setup-jfrog-cli@v2
        env:
          JF_ARTIFACTORY_1: ${{ secrets.ARTIFACTORY_TOKEN }}
      - name: Upload px4-firmware build to Artifactory
        env:
          ARTIFACTORY_GEN_REPO: gen-public-local
          BUILD_NAME_PX4: px4-firmware
          CI: true
        run: |
          set -exu

          pr_or_empty=""
          if [ ${{ github.event_name }} == 'pull_request' ]; then
            pr_or_empty="pr/"
          fi

          needs='${{ toJSON(needs) }}'
          target_list=$(jq -r 'keys | .[]' <<< "$needs")
          for target in $target_list; do
            if [ "$target" != "px4fwupdater" ]; then
              pkg=$(find bin -type f -name ${target}*)
              file_name=$(basename $pkg)
              ext="${file_name##*.}"

              echo "jfrog rt u --target-props COMMIT=$GITHUB_SHA"
              echo "  --build-name $BUILD_NAME_PX4"
              echo "  --build-number $GITHUB_SHA"
              echo "$pkg"
              echo "$ARTIFACTORY_GEN_REPO/builds/${pr_or_empty}px4-firmware/${target}/$file_name"
              echo " "
              echo "jfrog rt cp --flat"
              echo " $ARTIFACTORY_GEN_REPO/builds/${pr_or_empty}px4-firmware/${target}/$file_name"
              echo " $ARTIFACTORY_GEN_REPO/builds/${pr_or_empty}px4-firmware/${target}/latest/${target}.${ext}"
            fi
          done

          echo " jfrog rt build-publish $BUILD_NAME_PX4 $GITHUB_SHA"
          echo " jfrog rt bpr $BUILD_NAME_PX4 $GITHUB_SHA $ARTIFACTORY_GEN_REPO"
          echo "             --status dev"
          echo "             --comment development build"

